import Product from '../models/Product.js';

// T√ºm √ºr√ºnleri getir
export const getAllProducts = async (req, res) => {
    try {
        const products = await Product.find({ available: true })
            .sort({ popular: -1, createdAt: -1 });
        
        res.json({
            success: true,
            data: products,
            count: products.length
        });
    } catch (error) {
        console.error('Menu fetch error:', error);
        res.status(500).json({
            success: false,
            message: 'Men√º y√ºklenirken hata olu≈ütu'
        });
    }
};

// ID ile tek √ºr√ºn getir
export const getProductById = async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        
        if (!product) {
            return res.status(404).json({
                success: false,
                message: '√úr√ºn bulunamadƒ±'
            });
        }
        
        res.json({
            success: true,
            data: product
        });
    } catch (error) {
        console.error('Product fetch error:', error);
        res.status(500).json({
            success: false,
            message: '√úr√ºn y√ºklenirken hata olu≈ütu'
        });
    }
};

// Kategori bazƒ±nda √ºr√ºnler
export const getProductsByCategory = async (req, res) => {
    try {
        const { category } = req.params;
        const products = await Product.find({ 
            category: category,
            available: true 
        }).sort({ popular: -1, createdAt: -1 });
        
        res.json({
            success: true,
            category: category,
            data: products,
            count: products.length
        });
    } catch (error) {
        console.error('Category fetch error:', error);
        res.status(500).json({
            success: false,
            message: 'Kategori y√ºklenirken hata olu≈ütu'
        });
    }
};

// Yeni √ºr√ºn ekle (ADMIN)
export const createProduct = async (req, res) => {
    try {
        console.log('üöÄ BACKEND: createProduct √ßaƒürƒ±ldƒ±');
        console.log('üì• Request Body:', req.body);
        console.log('üë§ User:', req.user);
        
        const { name, description, price, category, popular, image } = req.body;
        
        console.log('üîç Parsed values:');
        console.log('- name:', name);
        console.log('- description:', description);
        console.log('- price:', price);
        console.log('- category:', category);
        console.log('- popular:', popular);
        console.log('- image:', image);
        
        // Validation
        if (!name || !description || !price) {
            console.log('‚ùå BACKEND: Basic validation failed');
            return res.status(400).json({
                success: false,
                message: 'ƒ∞sim, a√ßƒ±klama ve fiyat gereklidir!'
            });
        }
        
        const productData = {
            name,
            description,
            price: parseFloat(price),
            category: category || 'food',
            popular: popular || false,
            image: image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=500&h=400&fit=crop',
            createdBy: req.user.username,
            updatedBy: req.user.username
        };
        
        console.log('üìã Final product data:', productData);
        
        const newProduct = new Product(productData);
        console.log('üèóÔ∏è Product model created, attempting save...');

        const savedProduct = await newProduct.save();
        console.log('üíæ Product saved successfully:', savedProduct._id);
        
        console.log(`‚úÖ Admin ${req.user.username} yeni √ºr√ºn ekledi: ${name}`);
        
        res.status(201).json({
            success: true,
            message: '√úr√ºn ba≈üarƒ±yla eklendi',
            data: savedProduct
        });
    } catch (error) {
        console.error('‚ùå BACKEND: Product creation error:', error);
        console.error('‚ùå Error name:', error.name);
        console.error('‚ùå Error message:', error.message);
        
        // Mongoose validation errors
        if (error.name === 'ValidationError') {
            console.error('‚ùå Mongoose validation errors:', error.errors);
            return res.status(400).json({
                success: false,
                message: 'Validation hatasƒ±',
                errors: Object.values(error.errors).map(err => err.message)
            });
        }
        
        res.status(500).json({
            success: false,
            message: '√úr√ºn eklenirken hata olu≈ütu',
            error: error.message
        });
    }
};

// √úr√ºn g√ºncelle (ADMIN)
export const updateProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const updateData = req.body;
        
        // Fiyat varsa number'a √ßevir
        if (updateData.price) {
            updateData.price = parseFloat(updateData.price);
        }
        
        updateData.updatedBy = req.user.username;
        
        const updatedProduct = await Product.findByIdAndUpdate(
            id,
            updateData,
            { new: true, runValidators: true }
        );
        
        if (!updatedProduct) {
            return res.status(404).json({
                success: false,
                message: '√úr√ºn bulunamadƒ±'
            });
        }
        
        console.log(`‚úÖ Admin ${req.user.username} √ºr√ºn g√ºncelledi: ${updatedProduct.name}`);
        
        res.json({
            success: true,
            message: '√úr√ºn ba≈üarƒ±yla g√ºncellendi',
            data: updatedProduct
        });
    } catch (error) {
        console.error('Product update error:', error);
        res.status(500).json({
            success: false,
            message: '√úr√ºn g√ºncellenirken hata olu≈ütu'
        });
    }
};

// √úr√ºn sil (ADMIN)
export const deleteProduct = async (req, res) => {
    try {
        const { id } = req.params;
        
        const deletedProduct = await Product.findByIdAndDelete(id);
        
        if (!deletedProduct) {
            return res.status(404).json({
                success: false,
                message: '√úr√ºn bulunamadƒ±'
            });
        }
        
        console.log(`‚úÖ Admin ${req.user.username} √ºr√ºn sildi: ${deletedProduct.name}`);
        
        res.json({
            success: true,
            message: '√úr√ºn ba≈üarƒ±yla silindi',
            data: { id: deletedProduct._id, name: deletedProduct.name }
        });
    } catch (error) {
        console.error('Product deletion error:', error);
        res.status(500).json({
            success: false,
            message: '√úr√ºn silinirken hata olu≈ütu'
        });
    }
};

// Admin i√ßin t√ºm √ºr√ºnleri getir (inactive dahil)
export const getAllProductsForAdmin = async (req, res) => {
    try {
        const products = await Product.find({})
            .sort({ popular: -1, createdAt: -1 });
        
        res.json({
            success: true,
            data: products,
            count: products.length
        });
    } catch (error) {
        console.error('Admin menu fetch error:', error);
        res.status(500).json({
            success: false,
            message: 'Men√º y√ºklenirken hata olu≈ütu'
        });
    }
}; 