import express from 'express';
import { authenticateAdmin } from '../utils/jwt.js';
import Category from '../models/Category.js';

const router = express.Router();

// T√ºm kategorileri getir - HERKESE A√áIK
router.get('/', async (req, res) => {
    try {
        const categories = await Category.find({ active: true })
            .sort({ sortOrder: 1, createdAt: 1 });

        res.json({
            success: true,
            data: categories,
            count: categories.length
        });
    } catch (error) {
        console.error('‚ùå Kategoriler y√ºklenirken hata:', error);
        res.status(500).json({
            success: false,
            message: 'Kategoriler y√ºklenirken hata olu≈ütu'
        });
    }
});

// Admin i√ßin t√ºm kategorileri getir (inactive dahil)
router.get('/admin/all', authenticateAdmin, async (req, res) => {
    try {
        const categories = await Category.find({})
            .sort({ sortOrder: 1, createdAt: 1 });

        res.json({
            success: true,
            data: categories,
            count: categories.length
        });
    } catch (error) {
        console.error('‚ùå Admin kategoriler y√ºklenirken hata:', error);
        res.status(500).json({
            success: false,
            message: 'Kategoriler y√ºklenirken hata olu≈ütu'
        });
    }
});

// Yeni kategori olu≈ütur - SADECE ADMƒ∞N
router.post('/', authenticateAdmin, async (req, res) => {
    try {
        const { id, name, description, sortOrder } = req.body;

        // Validation
        if (!id || !name) {
            return res.status(400).json({
                success: false,
                message: 'ID ve isim gereklidir!'
            });
        }

        // ID benzersizlik kontrol√º
        const existingCategory = await Category.findOne({ id: id.toLowerCase() });
        if (existingCategory) {
            return res.status(400).json({
                success: false,
                message: 'Bu ID ile kategori zaten mevcut!'
            });
        }

        const newCategory = new Category({
            id: id.toLowerCase().trim(),
            name: name.trim(),
            description: description?.trim() || '',
            sortOrder: sortOrder || 0,
            createdBy: req.user?.username || 'admin',
            updatedBy: req.user?.username || 'admin'
        });

        const savedCategory = await newCategory.save();

        console.log(`‚úÖ Admin ${req.user?.username || 'admin'} yeni kategori ekledi: ${name}`);

        res.status(201).json({
            success: true,
            message: 'Kategori ba≈üarƒ±yla olu≈üturuldu',
            data: savedCategory
        });
    } catch (error) {
        console.error('‚ùå Kategori olu≈üturulurken hata:', error);
        res.status(500).json({
            success: false,
            message: 'Kategori olu≈üturulurken hata olu≈ütu'
        });
    }
});

// Kategori sil - SADECE ADMƒ∞N
router.delete('/:id', authenticateAdmin, async (req, res) => {
    try {
        const { id } = req.params;

        // Kategori var mƒ± kontrol et
        const category = await Category.findOne({ id: id.toLowerCase() });
        if (!category) {
            return res.status(404).json({
                success: false,
                message: 'Kategori bulunamadƒ±!'
            });
        }

        // Bu kategoriye ait √ºr√ºn sayƒ±sƒ±nƒ± kontrol et
        const Product = (await import('../models/Product.js')).default;
        
        console.log(`üîç Kategori siliniyor: ${id.toLowerCase()}`);
        
        // √ñnce bu kategorideki √ºr√ºnleri listele
        const productsInCategory = await Product.find({ category: id.toLowerCase() });
        console.log(`üîç Bu kategorideki √ºr√ºnler:`, productsInCategory.map(p => ({ id: p._id, name: p.name, category: p.category })));
        
        const productCount = await Product.countDocuments({ category: id.toLowerCase() });
        console.log(`üîç Silinecek √ºr√ºn sayƒ±sƒ±: ${productCount}`);
        
        // Kategoriyi sil
        await Category.findOneAndDelete({ id: id.toLowerCase() });
        
        // Bu kategoriye ait t√ºm √ºr√ºnleri sil
        if (productCount > 0) {
            const deleteResult = await Product.deleteMany({ category: id.toLowerCase() });
            console.log(`‚úÖ Silme sonucu:`, deleteResult);
            console.log(`‚úÖ ${productCount} √ºr√ºn kategorisiyle birlikte silindi`);
        }

        console.log(`‚úÖ Admin ${req.user?.username || 'admin'} kategori sildi: ${category.name}`);

        res.json({
            success: true,
            message: `Kategori ve ${productCount} √ºr√ºn ba≈üarƒ±yla silindi`,
            data: { 
                id: category.id, 
                name: category.name,
                deletedProducts: productCount
            }
        });
    } catch (error) {
        console.error('‚ùå Kategori silinirken hata:', error);
        res.status(500).json({
            success: false,
            message: 'Kategori silinirken hata olu≈ütu'
        });
    }
});

export default router;